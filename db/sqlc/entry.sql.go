// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: entry.sql

package db

import (
	"context"
	"time"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO "entries" (account_id, amount)
VALUES ($1, $2)
RETURNING id, account_id, amount, created_at
`

type CreateEntryParams struct {
	AccountID int64   `json:"account_id"`
	Amount    float64 `json:"amount"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE
FROM "entries"
WHERE id = $1
`

func (q *Queries) DeleteEntry(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, id)
	return err
}

const getAccountEntry = `-- name: GetAccountEntry :one
SELECT id, account_id, amount, created_at
FROM "entries"
WHERE account_id = $1
LIMIT 1
`

func (q *Queries) GetAccountEntry(ctx context.Context, accountID int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getAccountEntry, accountID)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getEntry = `-- name: GetEntry :one
SELECT id, account_id, amount, created_at
FROM "entries"
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getUserEntries = `-- name: GetUserEntries :many
SELECT account_id, amount, currency, e.created_at
FROM "entries" e
         JOIN accounts a on a.id = e.account_id
WHERE a.user_id = $1
LIMIT $2 OFFSET $3
`

type GetUserEntriesParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetUserEntriesRow struct {
	AccountID int64     `json:"account_id"`
	Amount    float64   `json:"amount"`
	Currency  Currency  `json:"currency"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetUserEntries(ctx context.Context, arg GetUserEntriesParams) ([]GetUserEntriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserEntries, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserEntriesRow
	for rows.Next() {
		var i GetUserEntriesRow
		if err := rows.Scan(
			&i.AccountID,
			&i.Amount,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEntries = `-- name: ListEntries :many
SELECT id, account_id, amount, created_at
FROM "entries"
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListEntriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
